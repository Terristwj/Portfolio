"use server";

// Database API
import { sql, QueryResult, QueryResultRow } from "@vercel/postgres";

// My Messages
import IMessage from "@/app/guestbook/components/MessageInterface";

// Utility Helpers - START ==========================================================

function printSuccess(message: string): void {
    console.log(`\t - API SUCCESS: ${message}`);
}

function printError(message: string): void {
    console.log(`\t - API ERROR: ${message}`);
}

// Utility Helpers - END ============================================================

// Database Configuration - START ===================================================

// Test the connection

export async function DBtestConnection(
    debugLog: boolean = false
): Promise<boolean> {
    if (debugLog) console.log("Testing connection...");
    try {
        await sql`SELECT 1;`;
        if (debugLog) printSuccess("Successfully connected to database");
        return true;
    } catch (error: unknown) {
        // Database connection error
        if (debugLog) printError("Failed to connect to database");
        return false;
    }
}

// Check if the table exists
export async function DBcheckTableExists(): Promise<boolean> {
    console.log("Checking table...");
    const result: QueryResult<QueryResultRow> = await sql`
        SELECT exists (
            SELECT FROM information_schema.tables 
            WHERE table_name = 'messages'
        );`;

    const exists: boolean = result.rows[0].exists;
    if (exists) {
        printSuccess("Table exists");
    } else {
        printSuccess("Table does not exist");
    }

    return exists;
}

// Create the table
export async function DBcreateTable(): Promise<boolean> {
    console.log("Creating table...");
    try {
        await sql`
            CREATE TABLE messages (
                id int NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ,
                username varchar(255) NOT NULL,
                message varchar(255) NOT NULL,
                created_at timestamp NOT NULL,
                is_hidden boolean DEFAULT false
            );`;
        printSuccess("Successfully created table");
        return true;
    } catch (error: unknown) {
        // Table already exists
        printError("Table already exists");
        return false;
    }
}

// Drop the table
export async function DBdropTable(): Promise<boolean> {
    console.log("Dropping table...");
    try {
        await sql`DROP TABLE messages;`;
        printSuccess("Successfully dropped table");
        return true;
    } catch (error: unknown) {
        // Table does not exists
        printError("Table does not exist");
        return false;
    }
}

// Database Configuration - END =====================================================

// Database - CREATE - START ========================================================

// Add a message
export async function DBaddMessage(
    username: string,
    message: string,
    created_at: string
): Promise<boolean> {
    console.log("Adding message...");
    try {
        await sql`
            INSERT INTO messages (username, message, created_at)
            VALUES (${username}, ${message}, ${created_at});`;
        printSuccess("Successfully added message");
        return true;
    } catch (error: unknown) {
        // Database connection error
        printError("Failed to add message");
        return false;
    }
}

// Database - CREATE - END ==========================================================

// Database - RETRIEVE - START ======================================================

// Mapper for messages
function mapMessages(result: QueryResult<QueryResultRow>): Array<IMessage> {
    const messages: Array<IMessage> = result.rows.map(
        (row: QueryResultRow): IMessage => {
            let rowData: IMessage = {
                id: row.id,
                message: row.message,
                username: row.username,
                created_at: row.created_at,
            };

            // Check if is_hidden exists
            // - Some API queries may not have this field
            if (row.is_hidden !== undefined) {
                rowData.is_hidden = row.is_hidden;
            }

            return rowData;
        }
    );
    return messages;
}

// (ADMIN) Get all messages by ASC
export async function DBgetAllMessagesASC_ADMIN(): Promise<
    Array<IMessage> | false
> {
    console.log("(ADMIN) Getting all messages by ASC...");
    try {
        const result: QueryResult<QueryResultRow> = await sql`
            SELECT * FROM messages
            ORDER BY id ASC;`;
        const messages: Array<IMessage> = mapMessages(result);
        printSuccess("Successfully retrieved all messages by ASC");
        return messages;
    } catch (error: unknown) {
        // Table does not exists
        printError("Failed to retrieve all messages by ASC");
        return false;
    }
}

// (ADMIN) Get all messages by DESC
export async function DBgetAllMessagesDESC_ADMIN(): Promise<
    Array<IMessage> | false
> {
    console.log("(ADMIN) Getting all messages by DESC...");
    try {
        const result: QueryResult<QueryResultRow> = await sql`
            SELECT * FROM messages
            ORDER BY id DESC;`;
        const messages: Array<IMessage> = mapMessages(result);
        printSuccess("Successfully retrieved all messages by DESC");
        return messages;
    } catch (error: unknown) {
        // Table does not exists
        printError("Failed to retrieve all messages by DESC");
        return false;
    }
}

// (GUEST) Get all messages by ASC
export async function DBgetAllMessagesASC_GUEST(): Promise<
    Array<IMessage> | false
> {
    console.log("(GUEST) Getting all messages by ASC...");
    try {
        const result: QueryResult<QueryResultRow> = await sql`
            SELECT id, username, message, created_at FROM messages
            WHERE is_hidden = false
            ORDER BY id ASC;`;
        const messages: Array<IMessage> = mapMessages(result);
        printSuccess("Successfully retrieved all messages by ASC");
        return messages;
    } catch (error: unknown) {
        // Table does not exists
        printError("Failed to retrieve all messages by ASC");
        return false;
    }
}

// (GUEST) Get all messages by DESC
export async function DBgetAllMessagesDESC_GUEST(): Promise<
    Array<IMessage> | false
> {
    console.log("(GUEST) Getting all messages by DESC...");
    try {
        const result: QueryResult<QueryResultRow> = await sql`
            SELECT id, username, message, created_at FROM messages
            WHERE is_hidden = false
            ORDER BY id DESC;`;
        const messages: Array<IMessage> = mapMessages(result);
        printSuccess("Successfully retrieved all messages by DESC");
        return messages;
    } catch (error: unknown) {
        // Table does not exists
        printError("Failed to retrieve all messages by DESC");
        return false;
    }
}

// Database - RETRIEVE - END ========================================================

// Database - UPDATE - START ========================================================

// Set display
export async function DBsetIsHidden(
    id: number,
    isHidden: boolean
): Promise<boolean> {
    console.log("Setting display...");
    try {
        await sql`
            UPDATE messages
            SET is_hidden = ${isHidden}
            WHERE id = ${id};`;
        printSuccess(`Successfully updated is_hidden for Messages id: ${id}`);
        return true;
    } catch (error: unknown) {
        // Id not found
        printError(`Failed to update is_hidden for Messages id: ${id}`);
        return false;
    }
}

// Database - UPDATE - END ==========================================================

// Database - DELETE - START ========================================================

// Database - DELETE - END ==========================================================
